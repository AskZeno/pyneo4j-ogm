name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality:
    runs-on: ubuntu-latest
    env:
      POETRY_VERSION: "1.5.1"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.10.6, 3.11]
    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
          cache-dependency-path: pyproject.toml
      - name: Setup a local virtual environment
        run: poetry config virtualenvs.create true --local && poetry config virtualenvs.in-project true --local
      - name: View poetry version
        run: poetry --version
      - name: Install dependencies
        run: poetry install
      - name: Run type-checker
        run: poetry run pyright
      - name: Run linter
        run: poetry run pylint --rcfile=.pylintrc pyneo4j_ogm tests

  tests:
    runs-on: ubuntu-latest
    services:
      neo4j:
        image: neo4j:latest
        env:
          NEO4J_AUTH: ${{ secrets.NEO4J_AUTH }}
        ports:
          - 7687:7687
    env:
      POETRY_VERSION: "1.5.1"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.10.6, 3.11]
    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"
          cache-dependency-path: pyproject.toml
      - name: Setup a local virtual environment
        run: poetry config virtualenvs.create true --local && poetry config virtualenvs.in-project true --local
      - name: View poetry version
        run: poetry --version
      - name: Install dependencies
        run: poetry install
      - name: Run tests
        run: poetry run pytest tests

  release:
    runs-on: ubuntu-latest
    needs: [quality, tests]
    steps:
      - name: foo
        run: echo "foo"
