name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      POETRY_VERSION: "1.5.1"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.10.6, 3.11]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.3.0

      - name: Configure poetry
        shell: bash
        run: python -m poetry config virtualenvs.in-project true

      - name: View poetry version
        run: poetry --version

      - name: Install dependencies
        run: python -m poetry install

      - name: Run linter
        run: poetry run pylint --rcfile=.pylintrc pyneo4j_ogm tests

  type-check:
    runs-on: ubuntu-latest
    env:
      POETRY_VERSION: "1.5.1"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.10.6, 3.11]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.3.0

      - name: Configure poetry
        shell: bash
        run: python -m poetry config virtualenvs.in-project true

      - name: View poetry version
        run: poetry --version

      - name: Install dependencies
        run: python -m poetry install

      - name: Run type-checker
        run: poetry run pyright

  test:
    runs-on: ubuntu-latest
    services:
      neo4j:
        image: neo4j:latest
        env:
          NEO4J_AUTH: ${{ secrets.NEO4J_AUTH }}
        ports:
          - 7687:7687
    env:
      POETRY_VERSION: "1.5.1"
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.10.6, 3.11]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python Poetry
        uses: abatilo/actions-poetry@v2.3.0

      - name: Configure poetry
        shell: bash
        run: python -m poetry config virtualenvs.in-project true

      - name: View poetry version
        run: poetry --version

      - name: Install dependencies
        run: python -m poetry install

      - name: Run tests
        run: poetry run pytest tests

  release:
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      !contains ( github.event.head_commit.message, 'chore(release)' )
    concurrency: release
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish package distributions to PyPI
        id: pypi-publish

        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          user: ${{ secrets.PYPI_USERNAME }}
          password: ${{ secrets.PYPI_PASSWORD }}
