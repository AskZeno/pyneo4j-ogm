name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.11.5"
      POETRY_VERSION: "1.5.1"
    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"
      - name: Setup a local virtual environment
        run: poetry config virtualenvs.create true --local && poetry config virtualenvs.in-project true --local
      - name: Install dependencies
        run: poetry install
      - name: Start unit tests
        run: poetry run pytest tests/unit

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.11.5"
      POETRY_VERSION: "1.5.1"
    services:
      neo4j:
        image: neo4j:latest
        env:
          NEO4J_AUTH: ${{ secrets.NEO4J_AUTH }}
        ports:
          - 7687:7687
    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry ${{ env.POETRY_VERSION }}
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "poetry"
      - name: Setup a local virtual environment
        run: poetry config virtualenvs.create true --local && poetry config virtualenvs.in-project true --local
      - name: Install dependencies
        run: poetry install
      - name: Start unit tests
        run: poetry run pytest tests/integration
